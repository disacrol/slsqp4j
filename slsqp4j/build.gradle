task prepareC {
    mkdir "${buildDir}/c"
}

task prepareFortran {
    mkdir "${buildDir}/fortran"
}

task prepareLibs {
    mkdir "${buildDir}/libs"
}

task compileFortran(type: Exec) {
    def src = file("src/jni/fortran/slsqp.f90")
    def obj = file("${buildDir}/fortran/slsqp.o")
    group "Build"
    description "Compiles the Fortran sources."
    commandLine 'gfortran', '-fPIC', '-o', obj, '-c', src, '-fallow-argument-mismatch'
    dependsOn prepareFortran
}

task compileC(type: Exec) {
    def src = file("src/jni/c/slsqp.c")
    def obj = file("${buildDir}/c/slsqp.o")

    group "Build"
    description "Compiles the C sources."
    logger.warn("Java home " + System.properties['java.home'] )
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;
    if (os.isLinux()) {
        logger.info("Linux detected")
        commandLine 'gcc', '-fPIC', '-c', '-o', obj, '-I', System.properties['java.home'] + "/include",
                '-I', System.properties['java.home'] + "/include/linux", src
    } else if (os.isMacOsX()) {
        logger.info("MacOSX detected")
        commandLine 'gcc-10', '-fPIC', '-c', '-o', obj, '-I', System.properties['java.home'] + "/../include",
                '-I', System.properties['java.home'] + "/../include/darwin", src
    } else if (os.isWindows()) {
        logger.info("Windows detected")
        commandLine 'gcc', '-fPIC', '-c', '-o', obj, '-I', System.properties['java.home'] + "/include",
                '-I', System.properties['java.home'] + "/include/win32", src
    } else {
        logger.error("This OS is not yet supported " + os)
    }
        // gcc-10 -fPIC -c -o build/c/slsqp.o -I /Library/Java/JavaVirtualMachines/jdk8/Contents/Home/include -I /Library/Java/JavaVirtualMachines/jdk8/Contents/Home/include/darwin src/jni/c/slsqp.c
    dependsOn prepareC
}

task buildJniLib(type: Exec) {
    def c_obj = file("${buildDir}/c/slsqp.o")
    def fortran_obj = file("${buildDir}/fortran/slsqp.o")
    def output = file("${buildDir}/libs/libslsqp.so")

    group "Build"
    description "Builds the JNI library."
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;
    if (os.isLinux()) {
        logger.info("Linux detected")
        commandLine 'gcc', '-shared', '-o', output, c_obj, fortran_obj
    } else if (os.isMacOsX()) {
        logger.info("MacOSX detected")
        commandLine 'gcc-10', '-shared', '-lgfortran', '-L', '/usr/local/gfortran/lib/', '-o', output, c_obj, fortran_obj
    } else if (os.isWindows()) {
        logger.info("Windows detected")
        commandLine 'gcc', '-shared', '-o', output, c_obj, fortran_obj, getFortranLib()
    } else {
        logger.error("This OS is not yet supported " + os)
    }
    dependsOn compileFortran, compileC, prepareLibs
}

task copySharedLibraries(type: Copy) {
    from "$buildDir/libs/libslsqp.so"
    into 'src/main/resources'
    dependsOn buildJniLib
}

sourceSets {
    java {
        resources.srcDirs += ['src/main/resources']
    }
}

compileJava.dependsOn 'copySharedLibraries'
test.dependsOn 'copySharedLibraries'

/**
 * Windows-specific method to return the full path to the adequate fortran library.
 * Only 'libgfortran-5.dll' is supported for now - available in GNU Fortran 11.2.0.
 *
 * @return full, absolute path to the libgfortran-5.dll, if found along with where gcc is located
 */
def getFortranLib() {
    def filename = "libgfortran-5.dll"
    def gccPath = locate("gcc")
    def onlyPath = gccPath.substring(0, gccPath.lastIndexOf(File.separator))
    return onlyPath + File.separator + filename
}

/**
 * Windows-specific method to find where a given executable is located.
 * For this to work, the executable must be located in one of the entries of the PATH environment variable.
 *
 * @param cmd a String with the name of the executable command
 * @return a String with the full, absolute path to its location
 */
def locate(cmd) {

    // fetch all locations where the given command is found - may be more than one
    def outputStream = new ByteArrayOutputStream()
    project.exec {
        ignoreExitValue = true // properly checked manually below
        commandLine "cmd", "/c", "where", "${cmd}"
        standardOutput = outputStream
    }

    // fail the build if command is not found in PATH
    def allLocations = outputStream.toString()
    if (!allLocations?.trim()) {
        throw new GradleException("'${cmd}' not found in your path")
    }

    // return the first entry, as it should correspond to the one that is in use by the system
    return allLocations.split()[0]

}