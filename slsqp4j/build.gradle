task prepareC(type: Exec) {
    commandLine 'mkdir', '-p', "${buildDir}/c"
}

task prepareFortran(type: Exec) {
    commandLine 'mkdir', '-p', "${buildDir}/fortran"
}

task prepareLibs(type: Exec) {
    commandLine 'mkdir', '-p', "${buildDir}/libs"
}

task compileFortran(type: Exec) {
    def src = file("src/jni/fortran/slsqp.f90")
    def obj = file("${buildDir}/fortran/slsqp.o")
    group "Build"
    description "Compiles the Fortran sources."
    commandLine 'gfortran', '-fPIC', '-o', obj, '-c', src, '-fallow-argument-mismatch'
    dependsOn prepareFortran
}

task compileC(type: Exec) {
    def src = file("src/jni/c/slsqp.c")
    def obj = file("${buildDir}/c/slsqp.o")

    group "Build"
    description "Compiles the C sources."
    logger.warn("Java home " + System.properties['java.home'] )
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;
    if (os.isLinux()) {
        logger.info("Linux detected")
        commandLine 'gcc', '-fPIC', '-c', '-o', obj, '-I', System.properties['java.home'] + "/include",
                '-I', System.properties['java.home'] + "/include/linux", src
    } else if (os.isMacOsX()) {
        logger.info("MacOSX detected")
        commandLine 'gcc-10', '-fPIC', '-c', '-o', obj, '-I', System.properties['java.home'] + "/../include",
                '-I', System.properties['java.home'] + "/../include/darwin", src
    } else {
        logger.error("This OS is not yet supported " + os)
    }
        // gcc-10 -fPIC -c -o build/c/slsqp.o -I /Library/Java/JavaVirtualMachines/jdk8/Contents/Home/include -I /Library/Java/JavaVirtualMachines/jdk8/Contents/Home/include/darwin src/jni/c/slsqp.c
    dependsOn prepareC
}

task buildJniLib(type: Exec) {
    def c_obj = file("${buildDir}/c/slsqp.o")
    def fortran_obj = file("${buildDir}/fortran/slsqp.o")
    def output = file("${buildDir}/libs/libslsqp.so")

    group "Build"
    description "Builds the JNI library."
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;
    if (os.isLinux()) {
        logger.info("Linux detected")
        commandLine 'gcc', '-shared', '-o', output, c_obj, fortran_obj
    } else if (os.isMacOsX()) {
        logger.info("MacOSX detected")
        commandLine 'gcc-10', '-shared', '-lgfortran', '-L', '/usr/local/gfortran/lib/', '-o', output, c_obj, fortran_obj
    } else {
        logger.error("This OS is not yet supported " + os)
    }
    dependsOn compileFortran, compileC, prepareLibs
}

task copySharedLibraries(type: Copy) {
    from "$buildDir/libs/libslsqp.so"
    into 'src/main/resources'
    dependsOn buildJniLib
}

sourceSets {
    java {
        resources.srcDirs += ['src/main/resources']
    }
}

compileJava.dependsOn 'copySharedLibraries'
test.dependsOn 'copySharedLibraries'
